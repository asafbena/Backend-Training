buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.swagger:swagger-codegen:2.3.1")
    }
}

plugins {
  id "org.sonarqube" version "3.0"
}

apply plugin: 'base'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'maven'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.fork = true

    project.buildDir = "${rootProject.buildDir}/${project.name}"

    sourceSets {
        main {
            java {
                srcDir "${project.buildDir}/src/main/java"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}

ext.appName      = 'petstore'
ext.apiPackage   = 'petstore.api'
ext.modelPackage = 'petstore.model'
ext.swaggerFile  = "${rootDir}/petstore.yaml"

project("${rootProject.appName}-server") {

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE')
        compile(group: 'org.apache.clerezza.ext', name: 'org.json.simple', version: '0.4')
        compile('io.springfox:springfox-swagger2:2.7.0')
        compile(group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1')

        testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')
    }

    task generateServer {
        doLast {
            def config = new CodegenConfigurator()
            config.setLang("spring")
            config.setApiPackage(rootProject.apiPackage)
            config.setModelPackage(rootProject.modelPackage)
            config.setInputSpec(rootProject.swaggerFile.toString())
            config.setOutputDir(project.buildDir.toString())
            config.setAdditionalProperties([
                    'dateLibrary'     : 'java8',
                    'useTags'         : 'true',
                    'interfaceOnly'   : 'true'
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate()
        }
    }

    compileJava.dependsOn('generateServer')

    test {
        useJUnitPlatform()
    }
}